---
title: "Time Series Project"
author: "Karol Orozco"
date: "2022-10-04"
---

```{r, message=FALSE, warning=FALSE}

library(tidyverse)
library(lubridate); library(tsibble)
library(readxl)
library(fpp3)
```


## Step 1: Problem Definition

In this project, I will perform a time series analysis using Zillow's historical median home prices for the US from March 2015 to October 2022. The project aims to provide information on renting costs in Orlando- FL, Portland- OR, and Houston- TX, and find the month that offers the lowest price to move in.

## Step 2: Gathering Information

You can find this free dataset on the Zillow website: https://www.zillow.com/research/data/#other-metrics


```{r}
raw_city <- read.csv("C:/Users/karol/Desktop/Portfolio/City_zori_sm_month.csv")
```

- RegionID:	This is unique Id for the Regions
- SizeRank:	This is the ranking done based on the size of the region
- RegionName:	This field contains the name of the city.
- RegionType:	Type of region.
- StateName:	State
- State:	This column provide the specific City Name of Housing Data
- Metro:	This provide the name of the metro city around that region
- County: Name	This is the county name for that region
- Months: Column	These columns contains the prices of region for every month since 2015- 2022

## Step 3: Preliminary (exploratory) analysis.

```{r}

str(raw_city[,c(1:11)])
```

We have to make this dataset tidy. Tidy Data is a way of structuring data so that it can be easily understood by people and analyzed by machines.

I need to remove the X at the beginning of the dates (X3.31.2015,...)

```{r}
names(raw_city) <- sub("^X", "", names(raw_city))
str(raw_city[,c(1:10)],10)
```

Now, I will create a new column called Price, where the values from the dates column will merge into it.

```{r}
rent_city <- raw_city %>% 
  pivot_longer(-c(RegionID,SizeRank,RegionName,RegionType,StateName,State,Metro,CountyName),
    names_to = "Monthly",
    values_to = "Price"
  ) 
str(rent_city)

```

```{r}
#Converting the Date from factor to character

rent_clean <- rent_city %>%
            mutate(Monthly_parsed = as.Date(Monthly,"%m.%d.%Y"))


rent_clean[["Monthly"]]<- as.character(rent_clean$Monthly)

rent_city[["Monthly"]]<- as.character(rent_city$Monthly)
summary(rent_city)
```


We see some missing values in the Price variable, but before I deal with those values, I will filter my data to the cities that I am interested the most: Houston, Orlando, and Portland.


```{r}

preferred_cities <- rent_clean %>%
  dplyr:::filter(RegionName %in% c("Houston", "Orlando", "Portland")) %>%
  dplyr:::filter(RegionID %in% c("13121", "13373", "39051"))

summary(preferred_cities)
```


- After filtering the data, we don't have any missing values
- We see that the date goes from March 31, 2015, to September 30, 2022, with a monthly calculation of the rental value.
- The monthly rent cost goes from 1,172 to 2,153 dollars

#### Coerce to a tsibble with as_tsibble()- Three Cities

A time series can be recorded as a tsibble object in R. tsibble objects extend tidy data frames (tibble objects) by introducing temporal structure, and to do it, we need to declare key and index. In this case, the Monthly_parsed containing the data-time is the index and the RegionID is the key. Other columns can be considered as measured variables.

```{r fig.height= 10, message=FALSE, warning=FALSE}

tsb_pref_cities <- preferred_cities %>%
                   select(RegionName,RegionID, Monthly_parsed, Price)

tsb_pref_cities <-tsb_pref_cities%>%
  as_tsibble(key= RegionName, index= Monthly_parsed)%>%
                   index_by(year_month = ~ yearmonth(.))

tsibble_df <-tsb_pref_cities%>%
  select(-RegionID)%>%
  as_tsibble(key= RegionName, index= year_month)
```

To visualize the data, I could usee the autoplot() command, but I rather to create my graph with ggplot.

```{r fig.height= 10, message=FALSE, warning=FALSE}

plot_cities <- tsibble_df %>%
  ggplot(aes(x= year_month, y= Price, color= RegionName)) +
  geom_line(size=1)+
   
    labs(y="Rent Price in US Dollars", 
       x= "Year",
       title="Rent Cost in Portland, Orlando & Houston, 2015-2022",
       caption = "data:https://www.zillow.com/research/data")+
  scale_colour_hue(name= " ")+
  scale_y_continuous(labels=scales::dollar_format())

plot_cities
```
#### Seasonal Plots

```{r, fig.width= 12}
pdx <- tsibble_df %>%
  filter(RegionName == "Portland")

pdx%>%
gg_season(Price, labels = "both")+
  labs(x= "",
       y= "",
       title="Portland")+
  scale_y_continuous(labels=scales::dollar_format())

```


```{r, fig.width= 12}
hst <- tsibble_df %>%
  filter(RegionName == "Houston")


hst%>%
gg_season(Price, labels = "both")+
  labs(x= "",
       y= "",
       title="Houston")+
  scale_y_continuous(labels=scales::dollar_format())

```


```{r, fig.width= 12}

orl <- tsibble_df %>%
  filter(RegionName == "Orlando")


orl%>%
gg_season(Price, labels = "both")+
  labs(x= "",
       y= "",
       title="Orlando")+
  scale_y_continuous(labels=scales::dollar_format())

```

#### Subseries

```{r}

pdx%>%
gg_subseries(Price)+
  labs(y= "Rent Price",
       x= "Year")+
  scale_y_continuous(labels=scales::dollar_format())+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

```{r}
hst %>%
gg_subseries(Price)+
  labs(y= "Rent Price",
       x= "Year")+
  scale_y_continuous(labels=scales::dollar_format())+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

```{r}
orl%>%
gg_subseries(Price)+
  labs(y= "Rent Price",
       x= "Year")+
  scale_y_continuous(labels=scales::dollar_format())+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

## Step 4: Choosing and fitting models


## Step 5: Using and evaluating a forecasting model

