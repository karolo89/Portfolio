{
  "hash": "77232b6ffa1dd7d6f5cfb341a6e30c6d",
  "result": {
    "markdown": "---\ntitle: \"House Prices in Porltand, OR\"\nauthor: \"Karol Orozco\"\ndate: \"2022-12\"\n---\n\n\n## Background\n\nthe goal is to build a classification model to predict the type of median housing prices in Portland, OR and its metropolitan area.\n\n\n\n\n\n## Get the Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_pdx <- read.csv(\"C:/Users/karol/Desktop/PORTLAND HOUSE.csv\", stringsAsFactors=TRUE)\n```\n:::\n\n\n## Prepare the Data\n\nThis data has 25731 obs. of 32 variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## raw_pdx <- raw_pdx%>%select(-id)\n\nhead(raw_pdx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id yearBuilt     City latitude longitude zipcode bathrooms bedrooms\n1  1      2007 Fairview 45.54357 -122.4418   97024         3        3\n2  2      2001 Fairview 45.54758 -122.4532   97024         3        3\n3  3      1982  Gresham 45.48823 -122.4444   97080         3        4\n4  4      1953 Portland 45.52663 -122.4641   97230         1        3\n5  5      1967  Gresham 45.51124 -122.4315   97030         3        6\n6  6      1967  Gresham 45.48799 -122.4162   97080         2        3\n  DateListed  DateSold daysOnZillow      homeType lastSoldPrice livingArea\n1  4/26/2021 5/21/2021           25     TOWNHOUSE        315400       1806\n2   3/1/2021 4/23/2021           53 SINGLE_FAMILY        400000       1518\n3  5/24/2021  6/4/2021           11 SINGLE_FAMILY        512000       2724\n4  5/24/2021  6/4/2021           11 SINGLE_FAMILY        348000       1217\n5  5/18/2021  6/1/2021           14     APARTMENT        510000       2400\n6  5/18/2021  6/1/2021           14 SINGLE_FAMILY        404200       1150\n  lotSize  price priceHistory.1.price propertyTaxRate hasCooling hasFireplace\n1    1555 315400               212000            1.12      FALSE         TRUE\n2    3484 400000               375000            1.12       TRUE         TRUE\n3    9583 512000               479000            1.12       TRUE         TRUE\n4   13939 348000               339500            1.12         NA         TRUE\n5    8545 510000               252450            1.12       TRUE           NA\n6    7000 404200               204500            1.12      FALSE         TRUE\n  hasGarage hasHeating hasView schools0distance schools0level schools0rating\n1     FALSE       TRUE   FALSE              0.4    Elementary              5\n2     FALSE       TRUE    TRUE              1.2    Elementary              5\n3     FALSE       TRUE    TRUE              0.8    Elementary              5\n4     FALSE       TRUE   FALSE              0.8    Elementary              2\n5     FALSE       TRUE   FALSE              0.3    Elementary              2\n6     FALSE       TRUE   FALSE              0.4    Elementary              2\n  schools1distance schools1level schools1rating schools2distance school2level\n1              1.1        Middle              2              2.6         High\n2              1.0        Middle              2              3.4         High\n3              1.7        Middle              6              1.4         High\n4              0.7        Middle              2              3.8         High\n5              0.9        Middle              6              0.3         High\n6              0.4        Middle              6              1.4         High\n  schools2rating\n1              3\n2              3\n3              3\n4              3\n5              3\n6              3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# convert variables\n\nraw_pdx <-  raw_pdx %>% \n  \n  mutate(\n    \n    yearBuilt = as.numeric(yearBuilt),\n    bathrooms = as.numeric(bathrooms),\n    bedrooms = as.numeric(bedrooms),\n    daysOnZillow = as.numeric(daysOnZillow),\n    lastSoldPrice = as.numeric(lastSoldPrice ),\n    livingArea = as.numeric(livingArea),\n    lotSize= as.numeric(lotSize),\n    price = as.numeric(price),\n    priceHistory.1.price= as.numeric(priceHistory.1.price),\n    \n    \n    schools0rating = as.factor(schools0rating),\n    schools1rating = as.factor(schools1rating),\n    schools2rating= as.factor(schools2rating),\n    zipcode = as.factor(zipcode)\n\n    \n  )\n```\n:::\n\n\n### Missing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.na(raw_pdx) %>% colSums()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  id            yearBuilt                 City \n                   0                  546                    0 \n            latitude            longitude              zipcode \n                  13                   13                    0 \n           bathrooms             bedrooms           DateListed \n                 484                  770                    0 \n            DateSold         daysOnZillow             homeType \n                   0                    6                    0 \n       lastSoldPrice           livingArea              lotSize \n                   0                  465                 2890 \n               price priceHistory.1.price      propertyTaxRate \n                   0                 1419                   11 \n          hasCooling         hasFireplace            hasGarage \n                4496                 4624                    0 \n          hasHeating              hasView     schools0distance \n                   1                    0                   25 \n       schools0level       schools0rating     schools1distance \n                   0                   25                   36 \n       schools1level       schools1rating     schools2distance \n                   0                   36                 2242 \n        school2level       schools2rating \n                   0                 2242 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_data <- raw_pdx %>%\n  filter(!is.na(yearBuilt))%>%\n  filter(!is.na(longitude))%>%\n  filter(!is.na(bedrooms))%>%\n  filter(!is.na(daysOnZillow))%>%\n  filter(!is.na(livingArea))%>%\n  filter(!is.na(priceHistory.1.price))%>%\n  filter(!is.na(hasFireplace))%>%\n  filter(!is.na(latitude))%>%\n  filter(!is.na(hasHeating))%>%\n  filter(!is.na(hasCooling))%>%\n  filter(!is.na(bathrooms))%>%\n  filter(!is.na(lotSize))%>%\n  filter(!is.na(propertyTaxRate))%>%\n  filter(!is.na(schools0distance))%>%\n  filter(!is.na(schools1distance))%>%\n  filter(!is.na(schools2distance))%>%\n  filter(!is.na(schools0rating))%>%\n  filter(!is.na(schools2rating))%>%\n  filter(!is.na(schools1rating))%>%\n  filter(!is.na(schools1rating))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(clean_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       id          yearBuilt             City         latitude    \n Min.   :    1   Min.   :   0   Portland   :5232   Min.   :45.26  \n 1st Qu.: 6207   1st Qu.:1965   Beaverton  :1456   1st Qu.:45.42  \n Median :15156   Median :1989   Hillsboro  :1194   Median :45.47  \n Mean   :13622   Mean   :1981   Lake Oswego: 942   Mean   :45.47  \n 3rd Qu.:20440   3rd Qu.:2003   Tigard     : 913   3rd Qu.:45.52  \n Max.   :25730   Max.   :2021   Gresham    : 845   Max.   :45.62  \n                                (Other)    :3906                  \n   longitude         zipcode        bathrooms        bedrooms     \n Min.   :-123.1   97229  :  834   Min.   : 0.00   Min.   : 0.000  \n 1st Qu.:-122.8   97045  :  713   1st Qu.: 2.00   1st Qu.: 3.000  \n Median :-122.7   97007  :  706   Median : 3.00   Median : 3.000  \n Mean   :-122.7   97086  :  632   Mean   : 2.78   Mean   : 3.568  \n 3rd Qu.:-122.6   97123  :  599   3rd Qu.: 3.00   3rd Qu.: 4.000  \n Max.   :-122.3   97068  :  573   Max.   :10.00   Max.   :10.000  \n                  (Other):10431                                   \n     DateListed          DateSold      daysOnZillow              homeType    \n 8/9/2019 :   71   5/28/2021 :  159   Min.   :  1   APARTMENT        :   38  \n 6/4/2021 :   66   6/30/2021 :  142   1st Qu.: 80   CONDO            :  136  \n 3/30/2021:   65   10/30/2020:  137   Median :192   HOME_TYPE_UNKNOWN:    2  \n 8/6/2019 :   64   7/31/2020 :  128   Mean   :187   SINGLE_FAMILY    :13659  \n 8/19/2019:   62   4/30/2021 :  127   3rd Qu.:294   TOWNHOUSE        :  653  \n 8/23/2019:   60   9/30/2020 :  122   Max.   :422                            \n (Other)  :14100   (Other)   :13673                                          \n lastSoldPrice       livingArea       lotSize             price        \n Min.   :    443   Min.   :  416   Min.   :       0   Min.   :    500  \n 1st Qu.: 450000   1st Qu.: 1664   1st Qu.:    4791   1st Qu.: 450000  \n Median : 551000   Median : 2206   Median :    7405   Median : 551000  \n Mean   : 634458   Mean   : 2399   Mean   :   17065   Mean   : 634827  \n 3rd Qu.: 710000   3rd Qu.: 2892   3rd Qu.:   10018   3rd Qu.: 710000  \n Max.   :6300000   Max.   :14014   Max.   :18992160   Max.   :6300000  \n                                                                       \n priceHistory.1.price propertyTaxRate hasCooling      hasFireplace   \n Min.   :    895      Min.   :1.010   Mode :logical   Mode :logical  \n 1st Qu.: 415000      1st Qu.:1.080   FALSE:807       FALSE:645      \n Median : 525000      Median :1.120   TRUE :13681     TRUE :13843    \n Mean   : 594080      Mean   :1.113                                  \n 3rd Qu.: 679992      3rd Qu.:1.130                                  \n Max.   :6888000      Max.   :1.130                                  \n                                                                     \n hasGarage       hasHeating       hasView        schools0distance\n Mode :logical   Mode :logical   Mode :logical   Min.   :0.0000  \n FALSE:14150     FALSE:24        FALSE:8574      1st Qu.:0.4000  \n TRUE :338       TRUE :14464     TRUE :5914      Median :0.6000  \n                                                 Mean   :0.8057  \n                                                 3rd Qu.:1.0000  \n                                                 Max.   :9.4000  \n                                                                 \n    schools0level   schools0rating schools1distance    schools1level  \n           :    0   7      :2862   Min.   : 0.000             :    0  \n Elementary:13077   5      :2359   1st Qu.: 0.800   Elementary:    3  \n Primary   : 1411   6      :2323   Median : 1.300   High      :    0  \n                    8      :1606   Mean   : 1.546   Middle    :14485  \n                    3      :1368   3rd Qu.: 2.100                     \n                    4      :1332   Max.   :11.900                     \n                    (Other):2638                                      \n schools1rating schools2distance school2level schools2rating\n 5      :2347   Min.   : 0.100       :    0   5      :3804  \n 8      :2262   1st Qu.: 1.000   High:14488   8      :2365  \n 3      :2238   Median : 1.700                3      :1962  \n 6      :2104   Mean   : 1.911                6      :1787  \n 7      :1655   3rd Qu.: 2.500                9      :1746  \n 4      :1595   Max.   :10.800                4      :1230  \n (Other):2287                                 (Other):1594  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_data <- \n  clean_data %>% \n  mutate(price_category = case_when( \n    price < 551000 ~ \"below\",\n    price >= 551000 ~ \"above\")) %>% \n  mutate(price_category = as.factor(price_category)) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gt) ## tables\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'gt' was built under R version 4.2.2\n```\n:::\n\n```{.r .cell-code}\nclean_data %>% \n  count(price_category, \n        name =\"total\") %>%\n  mutate(percent = total/sum(total)*100,\n         percent = round(percent, 2)) %>%\n gt() %>%\n  tab_header(\n    title = \"Portland, OR and its Metropolitan Area Median House Prices\",\n    subtitle = \"Above and below 551,000$\"\n  ) %>%\n  cols_label(\n    price_category = \"Price\",\n    total = \"Total\",\n    percent = \"Percent\"\n  ) %>% \n  fmt_number(\n    columns = vars(total),\n    suffixing = TRUE\n  ) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Since gt v0.3.0, `columns = vars(...)` has been deprecated.\n• Please use `columns = c(...)` instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Since gt v0.3.0, `columns = vars(...)` has been deprecated.\n• Please use `columns = c(...)` instead.\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"bcextsyfuh\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#bcextsyfuh .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#bcextsyfuh .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#bcextsyfuh .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#bcextsyfuh .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#bcextsyfuh .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#bcextsyfuh .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bcextsyfuh .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#bcextsyfuh .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#bcextsyfuh .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#bcextsyfuh .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#bcextsyfuh .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#bcextsyfuh .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#bcextsyfuh .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#bcextsyfuh .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#bcextsyfuh .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#bcextsyfuh .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#bcextsyfuh .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#bcextsyfuh .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bcextsyfuh .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#bcextsyfuh .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#bcextsyfuh .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bcextsyfuh .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#bcextsyfuh .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#bcextsyfuh .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bcextsyfuh .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bcextsyfuh .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#bcextsyfuh .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#bcextsyfuh .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bcextsyfuh .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#bcextsyfuh .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bcextsyfuh .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#bcextsyfuh .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bcextsyfuh .gt_left {\n  text-align: left;\n}\n\n#bcextsyfuh .gt_center {\n  text-align: center;\n}\n\n#bcextsyfuh .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#bcextsyfuh .gt_font_normal {\n  font-weight: normal;\n}\n\n#bcextsyfuh .gt_font_bold {\n  font-weight: bold;\n}\n\n#bcextsyfuh .gt_font_italic {\n  font-style: italic;\n}\n\n#bcextsyfuh .gt_super {\n  font-size: 65%;\n}\n\n#bcextsyfuh .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#bcextsyfuh .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#bcextsyfuh .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#bcextsyfuh .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#bcextsyfuh .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#bcextsyfuh .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#bcextsyfuh .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  <thead class=\"gt_header\">\n    <tr>\n      <td colspan=\"3\" class=\"gt_heading gt_title gt_font_normal\" style>Portland, OR and its Metropolitan Area Median House Prices</td>\n    </tr>\n    <tr>\n      <td colspan=\"3\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>Above and below 551,000$</td>\n    </tr>\n  </thead>\n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Price\">Price</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Total\">Total</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Percent\">Percent</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"price_category\" class=\"gt_row gt_center\">above</td>\n<td headers=\"total\" class=\"gt_row gt_right\">7.25K</td>\n<td headers=\"percent\" class=\"gt_row gt_right\">50.02</td></tr>\n    <tr><td headers=\"price_category\" class=\"gt_row gt_center\">below</td>\n<td headers=\"total\" class=\"gt_row gt_right\">7.24K</td>\n<td headers=\"percent\" class=\"gt_row gt_right\">49.98</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggmap)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggmap' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Google's Terms of Service: <https://mapsplatform.google.com>\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Please cite ggmap if you use it! Use `citation(\"ggmap\")` for details.\n```\n:::\n\n```{.r .cell-code}\nqmplot(x = longitude, \n       y = latitude, \n       data = clean_data, \n       geom = \"point\", \n       color = price_category, \n       alpha = 0.4) +\n  scale_alpha(guide = 'none')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Using `` zoom = `10` ``\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.\n```\n:::\n\n::: {.cell-output-display}\n![](Analyzing-Employee-Turnover_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThis image tells you that the housing prices are related to the location.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhouses_pdx <-\n  clean_data %>% \n  select( # select our predictors\n    longitude, \n    latitude, \n    price_category, \n    bathrooms, \n    yearBuilt, \n    homeType,\n    bedrooms, \n    livingArea, \n    lotSize,\n    schools2distance,\n    schools1distance,\n    schools0distance,\n    schools1distance)\n\nglimpse(houses_pdx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 14,488\nColumns: 12\n$ longitude        <dbl> -122.4418, -122.4532, -122.4444, -122.4162, -122.4513…\n$ latitude         <dbl> 45.54357, 45.54758, 45.48823, 45.48799, 45.49818, 45.…\n$ price_category   <fct> below, below, below, below, below, below, below, belo…\n$ bathrooms        <dbl> 3.0, 3.0, 3.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 4.0, 3.0…\n$ yearBuilt        <dbl> 2007, 2001, 1982, 1967, 1978, 2018, 2006, 2017, 1958,…\n$ homeType         <fct> TOWNHOUSE, SINGLE_FAMILY, SINGLE_FAMILY, SINGLE_FAMIL…\n$ bedrooms         <dbl> 3, 3, 4, 3, 3, 4, 3, 3, 4, 4, 3, 2, 4, 3, 4, 3, 3, 4,…\n$ livingArea       <dbl> 1806, 1518, 2724, 1150, 2036, 1947, 1548, 2209, 2838,…\n$ lotSize          <dbl> 1555, 3484, 9583, 7000, 6969, 4791, 5009, 5227, 6480,…\n$ schools2distance <dbl> 2.6, 3.4, 1.4, 1.4, 1.4, 2.2, 1.5, 1.4, 0.9, 2.3, 2.2…\n$ schools1distance <dbl> 1.1, 1.0, 1.7, 0.4, 2.1, 2.5, 0.5, 1.8, 0.3, 2.6, 2.5…\n$ schools0distance <dbl> 0.4, 1.2, 0.8, 0.4, 1.0, 0.3, 0.5, 1.0, 0.1, 0.4, 0.6…\n```\n:::\n:::\n\n\n\n### Data Splitting\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fix the random numbers by setting the seed \n# This enables the analysis to be reproducible \nset.seed(504)\n\n# Put 3/4 of the data into the training set \ndata_split <- initial_split(houses_pdx, \n                           prop = 3/4)\n\n# Create dataframes for the two sets:\ntrain_data <- training(data_split) \ntest_data <- testing(data_split)\n```\n:::\n\n\n### Validaton Set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhouse_folds <-\n vfold_cv(train_data, \n          v = 5, \n          strata = price_category) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(train_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"longitude\"        \"latitude\"         \"price_category\"   \"bathrooms\"       \n [5] \"yearBuilt\"        \"homeType\"         \"bedrooms\"         \"livingArea\"      \n [9] \"lotSize\"          \"schools2distance\" \"schools1distance\" \"schools0distance\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npdx_rec <-\n  recipe(price_category ~ .,\n         data = train_data) %>%\n  update_role(longitude, latitude, \n              new_role = \"ID\") %>% \n  \n  step_log(bathrooms, schools0distance, schools1distance, schools2distance, livingArea,yearBuilt ) %>% ## step_log() will log transform data\n  \n  step_naomit(everything(), skip = TRUE) %>% \n  \n  step_novel(all_nominal(), -all_outcomes()) %>% # converts all nominal variables to factors and takes care of other issues related to categorical variables.\n  \n  step_normalize(all_numeric(), -all_outcomes(), \n                 -longitude, -latitude) %>% # step_normalize() normalizes (center and scales) the numeric variables to have a standard deviation of one and a mean of zero\n  \n  step_dummy(all_nominal(), -all_outcomes()) %>% #converts our factor columns into numeric binary (0 and 1) variables.\n  \n  step_zv(all_numeric(), -all_outcomes()) %>% ## step_zv(): removes any numeric variables that have zero variance.\n  \n  step_corr(all_predictors(), threshold = 0.7, method = \"spearman\") # step_corr(): will remove predictor variables that have large correlations with other predictor variables.\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(pdx_rec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 4\n   variable         type    role      source  \n   <chr>            <chr>   <chr>     <chr>   \n 1 longitude        numeric ID        original\n 2 latitude         numeric ID        original\n 3 bathrooms        numeric predictor original\n 4 yearBuilt        numeric predictor original\n 5 homeType         nominal predictor original\n 6 bedrooms         numeric predictor original\n 7 livingArea       numeric predictor original\n 8 lotSize          numeric predictor original\n 9 schools2distance numeric predictor original\n10 schools1distance numeric predictor original\n11 schools0distance numeric predictor original\n12 price_category   nominal outcome   original\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprep_data <- \n  pdx_rec %>% # use the recipe object\n  prep() %>% # perform the recipe on training data\n  juice() # extract only the preprocessed dataframe \n```\n:::\n\n\n## The Model- Logistic regression\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_spec <- # your model specification\n  logistic_reg() %>%  # model type\n  set_engine(engine = \"glm\") %>%  # model engine\n  set_mode(\"classification\") # model mode\n\n# Show your model specification\nlog_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_wflow <- # new workflow object\n workflow() %>% # use workflow function\n add_recipe(pdx_rec) %>%   # use the new recipe\n add_model(log_spec)   # add your model spec\n\nlog_wflow\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: logistic_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n7 Recipe Steps\n\n• step_log()\n• step_naomit()\n• step_novel()\n• step_normalize()\n• step_dummy()\n• step_zv()\n• step_corr()\n\n── Model ───────────────────────────────────────────────────────────────────────\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_res <- log_wflow %>% \n  fit_resamples(\n    resamples = house_folds, \n    metrics = metric_set(\n    recall, precision, f_meas, \n    accuracy, kap,\n    roc_auc, sens, spec),\n    control = control_resamples(\n    save_pred = TRUE)\n    ) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5: preprocessor 1/1, model 1/1: glm.fit: fitted probabilities numerically 0 or 1 occurred\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# save model coefficients for a fitted model object from a workflow\n\nget_model <- function(x) {\n  pull_workflow_fit(x) %>% tidy()\n}\n\n# same as before with one exception\nlog_res_2 <- \n  log_wflow %>% \n  fit_resamples(\n    resamples = house_folds, \n    metrics = metric_set(\n      recall, precision, f_meas, \n      accuracy, kap,\n      roc_auc, sens, spec),\n    control = control_resamples(\n      save_pred = TRUE,\n      extract = get_model) # use extract and our new function\n    ) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5: preprocessor 1/1, model 1/1: glm.fit: fitted probabilities numerically 0 or 1 occurred\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: More than one set of outcomes were used when tuning. This should never\nhappen. Review how the outcome is specified in your model.\n```\n:::\n\n```{.r .cell-code}\nlog_res_2$.extracts[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\nTo get the results use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_res_2$.extracts[[1]][[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\nAll of the results can be flattened and collected using:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_coef <- map_dfr(log_res_2$.extracts, ~ .x[[1]][[1]])\nfilter(all_coef, term == \"livingArea\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 5\n  term       estimate std.error statistic p.value\n  <chr>         <dbl>     <dbl>     <dbl>   <dbl>\n1 livingArea    -2.61    0.0623     -41.9       0\n2 livingArea    -2.51    0.0603     -41.6       0\n3 livingArea    -2.50    0.0605     -41.2       0\n4 livingArea    -2.57    0.0627     -41.0       0\n```\n:::\n:::\n\n\n### Performance metrics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_res %>%  collect_metrics(summarize = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 6\n  .metric   .estimator  mean     n std_err .config             \n  <chr>     <chr>      <dbl> <int>   <dbl> <chr>               \n1 accuracy  binary     0.820     5 0.00379 Preprocessor1_Model1\n2 f_meas    binary     0.821     5 0.00396 Preprocessor1_Model1\n3 kap       binary     0.641     5 0.00758 Preprocessor1_Model1\n4 precision binary     0.819     5 0.00365 Preprocessor1_Model1\n5 recall    binary     0.824     5 0.00545 Preprocessor1_Model1\n6 roc_auc   binary     0.898     5 0.00371 Preprocessor1_Model1\n7 sens      binary     0.824     5 0.00545 Preprocessor1_Model1\n8 spec      binary     0.817     5 0.00407 Preprocessor1_Model1\n```\n:::\n:::\n\n\nShow performance for every single fold:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_res %>%  collect_metrics(summarize = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 40 × 5\n   id    .metric   .estimator .estimate .config             \n   <chr> <chr>     <chr>          <dbl> <chr>               \n 1 Fold1 recall    binary         0.816 Preprocessor1_Model1\n 2 Fold1 precision binary         0.821 Preprocessor1_Model1\n 3 Fold1 f_meas    binary         0.819 Preprocessor1_Model1\n 4 Fold1 accuracy  binary         0.819 Preprocessor1_Model1\n 5 Fold1 kap       binary         0.638 Preprocessor1_Model1\n 6 Fold1 sens      binary         0.816 Preprocessor1_Model1\n 7 Fold1 spec      binary         0.822 Preprocessor1_Model1\n 8 Fold1 roc_auc   binary         0.900 Preprocessor1_Model1\n 9 Fold2 recall    binary         0.806 Preprocessor1_Model1\n10 Fold2 precision binary         0.811 Preprocessor1_Model1\n# … with 30 more rows\n```\n:::\n:::\n\n\n### Collect predictions\n\nTo obtain the actual model predictions, we use the function collect_predictions and save the result as log_pred:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_pred <- \n  log_res %>%\n  collect_predictions()\n\nlog_pred %>% \n  conf_mat(price_category, .pred_class) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Truth\nPrediction above below\n     above  4479   993\n     below   958  4436\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_pred %>% \n  conf_mat(price_category, .pred_class) %>% \n  autoplot(type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](Analyzing-Employee-Turnover_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n### ROC Curve\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_pred %>% \n  group_by(id) %>% # id contains our folds\n  roc_curve(price_category, .pred_above) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](Analyzing-Employee-Turnover_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_pred %>% \n  ggplot() +\n  geom_density(aes(x = .pred_above, \n                   fill = price_category), \n               alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Analyzing-Employee-Turnover_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Analyzing-Employee-Turnover_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}