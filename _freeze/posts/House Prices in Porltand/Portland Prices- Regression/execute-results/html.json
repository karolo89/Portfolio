{
  "hash": "8ced14935649c2c89d6ed8c7b6ea68d7",
  "result": {
    "markdown": "---\ntitle: \"House Prices in Porltand, OR\"\nauthor: \"Karol Orozco\"\ndate: \"2022-12\"\n---\n\n\n## Background\n\nthe goal is to build a classification model to predict the type of median housing prices in Portland, OR and its metropolitan area.\n\n\n\n\n\n## Get the Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_data <- read.csv(\"C:/Users/karol/Desktop/clean_data_pdx.csv\", stringsAsFactors=TRUE)\n```\n:::\n\n\n## Take a look at the Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gt) ## tables\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'gt' was built under R version 4.2.2\n```\n:::\n\n```{.r .cell-code}\nclean_data %>% \n  count(price_category, \n        name =\"total\") %>%\n  mutate(percent = total/sum(total)*100,\n         percent = round(percent, 2)) %>%\n gt() %>%\n  tab_header(\n    title = \"Portland, OR and its Metropolitan Area Median House Prices\",\n    subtitle = \"Above and below 551,000$\"\n  ) %>%\n  cols_label(\n    price_category = \"Price\",\n    total = \"Total\",\n    percent = \"Percent\"\n  ) %>% \n  fmt_number(\n    columns = vars(total),\n    suffixing = TRUE\n  ) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Since gt v0.3.0, `columns = vars(...)` has been deprecated.\n• Please use `columns = c(...)` instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Since gt v0.3.0, `columns = vars(...)` has been deprecated.\n• Please use `columns = c(...)` instead.\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"ypvqkwvros\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#ypvqkwvros .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#ypvqkwvros .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ypvqkwvros .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#ypvqkwvros .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#ypvqkwvros .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#ypvqkwvros .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ypvqkwvros .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ypvqkwvros .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#ypvqkwvros .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#ypvqkwvros .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#ypvqkwvros .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#ypvqkwvros .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#ypvqkwvros .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#ypvqkwvros .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#ypvqkwvros .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#ypvqkwvros .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#ypvqkwvros .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#ypvqkwvros .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ypvqkwvros .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#ypvqkwvros .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#ypvqkwvros .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ypvqkwvros .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#ypvqkwvros .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#ypvqkwvros .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ypvqkwvros .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ypvqkwvros .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#ypvqkwvros .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#ypvqkwvros .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ypvqkwvros .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ypvqkwvros .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ypvqkwvros .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ypvqkwvros .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ypvqkwvros .gt_left {\n  text-align: left;\n}\n\n#ypvqkwvros .gt_center {\n  text-align: center;\n}\n\n#ypvqkwvros .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#ypvqkwvros .gt_font_normal {\n  font-weight: normal;\n}\n\n#ypvqkwvros .gt_font_bold {\n  font-weight: bold;\n}\n\n#ypvqkwvros .gt_font_italic {\n  font-style: italic;\n}\n\n#ypvqkwvros .gt_super {\n  font-size: 65%;\n}\n\n#ypvqkwvros .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#ypvqkwvros .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#ypvqkwvros .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#ypvqkwvros .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#ypvqkwvros .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#ypvqkwvros .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#ypvqkwvros .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  <thead class=\"gt_header\">\n    <tr>\n      <td colspan=\"3\" class=\"gt_heading gt_title gt_font_normal\" style>Portland, OR and its Metropolitan Area Median House Prices</td>\n    </tr>\n    <tr>\n      <td colspan=\"3\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>Above and below 551,000$</td>\n    </tr>\n  </thead>\n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Price\">Price</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Total\">Total</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Percent\">Percent</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"price_category\" class=\"gt_row gt_center\">above</td>\n<td headers=\"total\" class=\"gt_row gt_right\">7.25K</td>\n<td headers=\"percent\" class=\"gt_row gt_right\">50.02</td></tr>\n    <tr><td headers=\"price_category\" class=\"gt_row gt_center\">below</td>\n<td headers=\"total\" class=\"gt_row gt_right\">7.24K</td>\n<td headers=\"percent\" class=\"gt_row gt_right\">49.98</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggmap)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggmap' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Google's Terms of Service: <https://mapsplatform.google.com>\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Please cite ggmap if you use it! Use `citation(\"ggmap\")` for details.\n```\n:::\n\n```{.r .cell-code}\nqmplot(x = longitude, \n       y = latitude, \n       data = clean_data, \n       geom = \"point\", \n       color = price_category, \n       alpha = 0.4) +\n  scale_alpha(guide = 'none')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Using `` zoom = `10` ``\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.\n```\n:::\n\n::: {.cell-output-display}\n![](Portland-Prices--Regression_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nThis image tells you that the housing prices are related to the location.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhouses_pdx <-\n  clean_data %>% \n  select( # select our predictors\n    longitude, \n    latitude, \n    price_category, \n    bathrooms, \n    yearBuilt, \n    homeType,\n    bedrooms, \n    livingArea, \n    lotSize,\n    schools2distance,\n    schools1distance,\n    schools0distance,\n    schools1distance)\n\nglimpse(houses_pdx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 14,488\nColumns: 12\n$ longitude        <dbl> -122.4418, -122.4532, -122.4444, -122.4162, -122.4513…\n$ latitude         <dbl> 45.54357, 45.54758, 45.48823, 45.48799, 45.49818, 45.…\n$ price_category   <fct> below, below, below, below, below, below, below, belo…\n$ bathrooms        <dbl> 3.0, 3.0, 3.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 4.0, 3.0…\n$ yearBuilt        <int> 2007, 2001, 1982, 1967, 1978, 2018, 2006, 2017, 1958,…\n$ homeType         <fct> TOWNHOUSE, SINGLE_FAMILY, SINGLE_FAMILY, SINGLE_FAMIL…\n$ bedrooms         <int> 3, 3, 4, 3, 3, 4, 3, 3, 4, 4, 3, 2, 4, 3, 4, 3, 3, 4,…\n$ livingArea       <int> 1806, 1518, 2724, 1150, 2036, 1947, 1548, 2209, 2838,…\n$ lotSize          <int> 1555, 3484, 9583, 7000, 6969, 4791, 5009, 5227, 6480,…\n$ schools2distance <dbl> 2.6, 3.4, 1.4, 1.4, 1.4, 2.2, 1.5, 1.4, 0.9, 2.3, 2.2…\n$ schools1distance <dbl> 1.1, 1.0, 1.7, 0.4, 2.1, 2.5, 0.5, 1.8, 0.3, 2.6, 2.5…\n$ schools0distance <dbl> 0.4, 1.2, 0.8, 0.4, 1.0, 0.3, 0.5, 1.0, 0.1, 0.4, 0.6…\n```\n:::\n:::\n\n\n\n### Data Splitting\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fix the random numbers by setting the seed \n# This enables the analysis to be reproducible \nset.seed(504)\n\n# Put 3/4 of the data into the training set \ndata_split <- initial_split(houses_pdx, \n                           prop = 3/4)\n\n# Create dataframes for the two sets:\ntrain_data <- training(data_split) \ntest_data <- testing(data_split)\n```\n:::\n\n\n### Validaton Set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhouse_folds <-\n vfold_cv(train_data, \n          v = 5, \n          strata = price_category) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(train_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"longitude\"        \"latitude\"         \"price_category\"   \"bathrooms\"       \n [5] \"yearBuilt\"        \"homeType\"         \"bedrooms\"         \"livingArea\"      \n [9] \"lotSize\"          \"schools2distance\" \"schools1distance\" \"schools0distance\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npdx_rec <-\n  recipe(price_category ~ .,\n         data = train_data) %>%\n  update_role(longitude, latitude, \n              new_role = \"ID\") %>% \n  \n  step_log(bathrooms) %>% ## step_log() will log transform data\n  \n  step_naomit(everything(), skip = TRUE) %>% \n  \n  step_novel(all_nominal(), -all_outcomes()) %>% # converts all nominal variables to factors and takes care of other issues related to categorical variables.\n  \n  step_normalize(all_numeric(), -all_outcomes(), \n                 -longitude, -latitude) %>% # step_normalize() normalizes (center and scales) the numeric variables to have a standard deviation of one and a mean of zero\n  \n  step_dummy(all_nominal(), -all_outcomes()) %>% #converts our factor columns into numeric binary (0 and 1) variables.\n  \n  step_zv(all_numeric(), -all_outcomes()) %>% ## step_zv(): removes any numeric variables that have zero variance.\n  \n  step_corr(all_predictors(), threshold = 0.7, method = \"spearman\") # step_corr(): will remove predictor variables that have large correlations with other predictor variables.\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(pdx_rec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 4\n   variable         type    role      source  \n   <chr>            <chr>   <chr>     <chr>   \n 1 longitude        numeric ID        original\n 2 latitude         numeric ID        original\n 3 bathrooms        numeric predictor original\n 4 yearBuilt        numeric predictor original\n 5 homeType         nominal predictor original\n 6 bedrooms         numeric predictor original\n 7 livingArea       numeric predictor original\n 8 lotSize          numeric predictor original\n 9 schools2distance numeric predictor original\n10 schools1distance numeric predictor original\n11 schools0distance numeric predictor original\n12 price_category   nominal outcome   original\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprep_data <- \n  pdx_rec %>% # use the recipe object\n  prep() %>% # perform the recipe on training data\n  juice() # extract only the preprocessed dataframe \n```\n:::\n\n\n## The Model- Logistic regression\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_spec <- # your model specification\n  logistic_reg() %>%  # model type\n  set_engine(engine = \"glm\") %>%  # model engine\n  set_mode(\"classification\") # model mode\n\n# Show your model specification\nlog_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_wflow <- # new workflow object\n workflow() %>% # use workflow function\n add_recipe(pdx_rec) %>%   # use the new recipe\n add_model(log_spec)   # add your model spec\n\nlog_wflow\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: logistic_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n7 Recipe Steps\n\n• step_log()\n• step_naomit()\n• step_novel()\n• step_normalize()\n• step_dummy()\n• step_zv()\n• step_corr()\n\n── Model ───────────────────────────────────────────────────────────────────────\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_res <- log_wflow %>% \n  fit_resamples(\n    resamples = house_folds, \n    metrics = metric_set(\n    recall, precision, f_meas, \n    accuracy, kap,\n    roc_auc, sens, spec),\n    control = control_resamples(\n    save_pred = TRUE)\n    ) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5: preprocessor 1/1, model 1/1: glm.fit: fitted probabilities numerically 0 or 1 occurred\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# save model coefficients for a fitted model object from a workflow\n\nget_model <- function(x) {\n  pull_workflow_fit(x) %>% tidy()\n}\n\n# same as before with one exception\nlog_res_2 <- \n  log_wflow %>% \n  fit_resamples(\n    resamples = house_folds, \n    metrics = metric_set(\n      recall, precision, f_meas, \n      accuracy, kap,\n      roc_auc, sens, spec),\n    control = control_resamples(\n      save_pred = TRUE,\n      extract = get_model) # use extract and our new function\n    ) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n! Fold5: preprocessor 1/1, model 1/1: glm.fit: fitted probabilities numerically 0 or 1 occurred\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: More than one set of outcomes were used when tuning. This should never\nhappen. Review how the outcome is specified in your model.\n```\n:::\n\n```{.r .cell-code}\nlog_res_2$.extracts[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\nTo get the results use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_res_2$.extracts[[1]][[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\nAll of the results can be flattened and collected using:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_coef <- map_dfr(log_res_2$.extracts, ~ .x[[1]][[1]])\nfilter(all_coef, term == \"bedrooms\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 5\n  term     estimate std.error statistic p.value\n  <chr>       <dbl>     <dbl>     <dbl>   <dbl>\n1 bedrooms    0.106    0.0424      2.49 0.0129 \n2 bedrooms    0.106    0.0415      2.57 0.0103 \n3 bedrooms    0.117    0.0417      2.81 0.00502\n4 bedrooms    0.138    0.0422      3.28 0.00104\n```\n:::\n:::\n\n\n### Performance metrics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_res %>%  collect_metrics(summarize = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 6\n  .metric   .estimator  mean     n std_err .config             \n  <chr>     <chr>      <dbl> <int>   <dbl> <chr>               \n1 accuracy  binary     0.820     5 0.00454 Preprocessor1_Model1\n2 f_meas    binary     0.816     5 0.00496 Preprocessor1_Model1\n3 kap       binary     0.640     5 0.00909 Preprocessor1_Model1\n4 precision binary     0.835     5 0.00404 Preprocessor1_Model1\n5 recall    binary     0.798     5 0.00660 Preprocessor1_Model1\n6 roc_auc   binary     0.899     5 0.00372 Preprocessor1_Model1\n7 sens      binary     0.798     5 0.00660 Preprocessor1_Model1\n8 spec      binary     0.842     5 0.00388 Preprocessor1_Model1\n```\n:::\n:::\n\n\nShow performance for every single fold:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_res %>%  collect_metrics(summarize = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 40 × 5\n   id    .metric   .estimator .estimate .config             \n   <chr> <chr>     <chr>          <dbl> <chr>               \n 1 Fold1 recall    binary         0.788 Preprocessor1_Model1\n 2 Fold1 precision binary         0.834 Preprocessor1_Model1\n 3 Fold1 f_meas    binary         0.810 Preprocessor1_Model1\n 4 Fold1 accuracy  binary         0.816 Preprocessor1_Model1\n 5 Fold1 kap       binary         0.631 Preprocessor1_Model1\n 6 Fold1 sens      binary         0.788 Preprocessor1_Model1\n 7 Fold1 spec      binary         0.843 Preprocessor1_Model1\n 8 Fold1 roc_auc   binary         0.902 Preprocessor1_Model1\n 9 Fold2 recall    binary         0.778 Preprocessor1_Model1\n10 Fold2 precision binary         0.822 Preprocessor1_Model1\n# … with 30 more rows\n```\n:::\n:::\n\n\n### Collect predictions\n\nTo obtain the actual model predictions, we use the function collect_predictions and save the result as log_pred:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_pred <- \n  log_res %>%\n  collect_predictions()\n\nlog_pred %>% \n  conf_mat(price_category, .pred_class) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Truth\nPrediction above below\n     above  4339   857\n     below  1098  4572\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_pred %>% \n  conf_mat(price_category, .pred_class) %>% \n  autoplot(type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](Portland-Prices--Regression_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n### ROC Curve\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_pred %>% \n  group_by(id) %>% # id contains our folds\n  roc_curve(price_category, .pred_above) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](Portland-Prices--Regression_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_pred %>% \n  ggplot() +\n  geom_density(aes(x = .pred_above, \n                   fill = price_category), \n               alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Portland-Prices--Regression_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Portland-Prices--Regression_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}